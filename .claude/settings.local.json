{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git status:*)",
      "Bash(git submodule:*)",
      "Bash(git -C external/*)",
      "Bash(git -C /home/duane/madrona_escape_room ls-files)",
      "Bash(./build/mad_escape_gpu_tests *)",
      "Bash(.claude/scripts/fix-submodule-noise.sh)",
      "Bash(.claude/scripts/repo-status.sh)",
      "Bash(uv run python .claude/scripts/hello.py)",
      "mcp__gdb__gdb_set_breakpoint",
      "mcp__gdb__gdb_command",
      "mcp__gdb__gdb_print",
      "mcp__gdb__gdb_continue",
      "mcp__gdb__gdb_step",
      "mcp__gdb__gdb_next",
      "mcp__gdb__gdb_start",
      "mcp__gdb__gdb_load",
      "mcp__gdb__gdb_terminate",
      "mcp__gdb__gdb_backtrace",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__search_for_pattern",
      "mcp__python-debugger-mcp__send_pdb_command",
      "mcp__python-debugger-mcp__end_debug",
      "mcp__python-debugger-mcp__restart_debug",
      "mcp__python-debugger-mcp__start_debug",
      "mcp__python-debugger-mcp__set_breakpoint",
      "Bash(python:*)",
      "Bash(uv run:*)",
      "Bash(uv pip:*)",
      "Bash(pip:*)",
      "Bash(cmake:*)",
      "Bash(make:*)",
      "Bash(ctest:*)",
      "Bash(./build/*)",
      "Bash(./tests/*)",
      "Bash(cat:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(true)",
      "Bash([ -d build ])",
      "Bash(source:*)",
      "Bash(ps:*)",
      "Bash(nvidia-smi:*)",
      "Bash(lsof:*)",
      "Bash(netstat:*)",
      "Bash(tar:*)",
      "Bash(gzip:*)",
      "Bash(unzip:*)",
      "Bash(zip:*)",
      "Bash(awk:*)",
      "Bash(sed:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(wc:*)",
      "Bash(diff:*)",
      "Bash(which:*)",
      "Bash(whereis:*)",
      "Bash(ldd:*)",
      "Bash(nm:*)",
      "Bash(objdump:*)",
      "Bash(gdb:*)",
      "Bash(valgrind:*)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(ping:*)",
      "WebFetch(domain:nanobind.readthedocs.io)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebSearch",
      "Bash(./build/file_inspector:*)",
      "Bash(./build/mad_escape_tests:*)",
      "Bash(./build/headless:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(./mad_escape_tests:*)",
      "Bash(export ALLOW_GPU_TESTS_IN_SUITE=1)",
      "Bash(cp:*)",
      "mcp__madrona_repl__execute_python",
      "Bash(./tests/run_cpp_tests.sh:*)",
      "Bash(./scripts/run-clang-tidy.sh:*)",
      "Bash(./scripts/run-clangd-tidy.sh:*)",
      "Bash(git -C external/mcp-gdb status --porcelain)",
      "Bash(./tests/cpp/mad_escape_tests:*)",
      "Bash(git -C external/madrona status)",
      "Bash(git -C external/madrona clean -fd)",
      "Bash(git -C external/madrona/external/meshoptimizer status --short)",
      "Bash(git -C external/mcp-gdb status)",
      "Bash(git -C external/madrona status --short)",
      "Bash(git -C external/madrona diff HEAD)",
      "Bash(git -C external/mcp-gdb status --short)",
      "Bash(/dev/null)",
      "Bash(echo \"Exit code: $?\")",
      "mcp__python-debugger-mcp__examine_variable",
      "Bash(./build/viewer test_recordings/test_reward_system.py__test_forward_movement_reward_actions.bin)",
      "Bash(./build/viewer:*)",
      "Bash(ALLOW_GPU_TESTS_IN_SUITE=1 ./build/mad_escape_tests --gtest_filter=\"CApiGPUTest.ManagerCreation\")",
      "Bash(ALLOW_GPU_TESTS_IN_SUITE=1 ./build/mad_escape_tests --gtest_filter=\"CApiGPUTest.TensorOperations\")",
      "Bash(ALLOW_GPU_TESTS_IN_SUITE=1 ./build/mad_escape_tests --gtest_filter=\"CApiGPUTest.GPUTensorProperties\")",
      "Bash(git merge-base:*)",
      "Bash(clang:*)",
      "Bash(git stash:*)",
      "Bash(pahole:*)",
      "WebFetch(domain:www.gamingworks.nl)",
      "Bash(git -C external/madrona log --oneline -3)",
      "Bash(git log:*)",
      "Bash(./claude-scripts/repo-status.sh:*)",
      "Bash(/home/duane/madrona_escape_room/claude-scripts/repo-status.sh:*)",
      "Bash(cmp:*)",
      "Bash(git config:*)",
      "Bash(git pull:*)",
      "Bash(git -C external/madrona status --porcelain)",
      "Bash(./claude-scripts/fix-submodule-noise.sh:*)",
      "Bash(./tests/quick_pytest.sh)",
      "Bash(/home/duane/madrona_escape_room/.claude/scripts/repo-status.sh:*)",
      "Bash(/home/duane/madrona_escape_room/.claude/scripts/random.sh:*)",
      "mcp__hangman-game-server__make_guess",
      "mcp__hangman-game-server__start_hangman_game",
      "mcp__hangman-game-server__get_game_status",
      "WebFetch(domain:www.indailysa.com.au)",
      "WebFetch(domain:www.odt.co.nz)",
      "WebFetch(domain:sanjosespotlight.com)",
      "WebFetch(domain:ground.news)",
      "Bash(./build/mad_escape_gpu_tests:*)",
      "Bash(git -C external/madrona branch -a)",
      "Bash(git -C external/madrona log --oneline --graph -10 origin/main)",
      "Bash(git -C external/madrona rev-parse HEAD)",
      "Bash(git -C external/madrona rev-parse origin/main)",
      "Bash(then echo \"YES - HEAD is at origin/main\")",
      "Bash(else echo \"NO - They differ\")",
      "Bash(fi)",
      "Bash(./tests/quicktest.sh:*)",
      "Bash(git checkout:*)",
      "Bash(./build.sh)",
      "Bash(git worktree:*)",
      "Bash(git cherry-pick:*)",
      "Bash(./build.sh:*)"
    ],
    "deny": []
  },
  "hooks": {
    "SessionStart": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "claude mcp list | grep -q 'madrona_repl' || claude mcp add madrona_repl uv run python -- scripts/fastmcp_madrona_server.py || true"
          },
          {
            "type": "command",
            "command": "claude mcp list | grep -q 'gdb' || echo 'Claude would like his GDB MCP server! Tell Claude to read docs/development/debugging/GDB_GUIDE.md and follow the installation instructions.'"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "uv run python .claude/scripts/claude-code-status-line.py"
  }
}